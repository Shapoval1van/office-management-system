# CHANGE GROUP REPOSITORY
change.group.find.by.request.id=SELECT CG.request_id, CG.change_group_id, CG.created, CI.change_item_id, CI.field_id, CI.new_value, CI.old_value, \
    CG.author_id, P.first_name, P.last_name \
    FROM change_group AS CG \
    LEFT JOIN change_item AS CI ON CG.change_group_id = CI.change_group_id \
    JOIN person AS P ON CG.author_id = p.person_id \
    WHERE CG.request_id= ? 
change.group.period.day= AND age(CG.created) < '1 day'
change.group.period.month= AND age(CG.created) < '30 day'
count.change.group.by.request.id=SELECT count(*)\
    FROM change_group AS CG \
    LEFT JOIN change_item AS CI ON CG.change_group_id = CI.change_group_id \
    JOIN person AS P ON CG.author_id = p.person_id \
    WHERE CG.request_id= ? 


#COMMENT REPOSITORY
comment.find.by.request.id=SELECT comment_id, body, request_id, author_id, publish_date FROM comment \
   WHERE request_id=? ORDER BY publish_date DESC
comment.count.by.request.id=SELECT COUNT(*) FROM comment WHERE request_id=?


#FIELD REPOSITORY
field.select.all=SELECT * FROM field WHERE name = ?


#NOTIFICATION
notification.find.all.sort.by.date=select * from NOTIFICATION order by created


#PERSON
person.find.by.email=SELECT person_id, first_name, last_name, email, password, role_id, enabled, deleted \
    FROM person WHERE email = ?

person.find.by.name.pattern=SELECT person_id, first_name, last_name, email, password, role_id, enabled, deleted \
    FROM  person WHERE (LOWER(CONCAT(first_name, last_name)) like LOWER(CONCAT('%', REPLACE(? , ' ', '%'), '%')) OR \
    LOWER(CONCAT(last_name, first_name)) like LOWER(CONCAT('%', REPLACE(? , ' ', '%'), '%'))) AND \
    (role_id = 2 OR role_id = 1) AND deleted IS FALSE

person.find.user.by.name.pattern=SELECT person_id, first_name, last_name, email, password, role_id, enabled, deleted \
    FROM  person WHERE (LOWER(CONCAT(first_name, last_name)) like LOWER(CONCAT('%', REPLACE(? , ' ', '%'), '%'))) \
        AND deleted IS FALSE

person.find.manager=SELECT person_id, first_name, last_name, email, password, role_id, enabled, deleted \
    FROM person WHERE role_id = 2 AND deleted IS FALSE

person.update.password=UPDATE person SET password = ? WHERE email = ?

person.update.delete.enable = UPDATE person SET enabled = ?, deleted = ? WHERE person_id = ?

person.update=UPDATE person set first_name = ?, last_name = ?, role_id = ? \
    WHERE person_id = ?

person.find.all.available.by.role=SELECT person_id, first_name, last_name, email, password, role_id, enabled, deleted \
    FROM person WHERE role_id = ? AND enabled IS TRUE AND deleted IS FALSE

person.find.all.available=SELECT person_id, first_name, last_name, email, password, role_id, enabled, deleted \
    FROM person WHERE enabled IS TRUE AND deleted IS FALSE

person.find.all.deleted = SELECT person_id, first_name, last_name, email, password, role_id, enabled, deleted \
    FROM person WHERE enabled IS FALSE and deleted IS TRUE

person.find.all.deleted.by.role = SELECT person_id, first_name, last_name, email, password, role_id, enabled, deleted \
    FROM person WHERE enabled IS FALSE and deleted IS TRUE and role_id = ?


person.count.active.by.role=SELECT COUNT(*) FROM person WHERE role_id = ? AND enabled IS TRUE AND deleted IS FALSE
person.count.deleted.by.role=SELECT COUNT(*) FROM person WHERE role_id = ? AND enabled=false AND deleted=true

person.count.active=SELECT COUNT(*) FROM person WHERE enabled IS TRUE AND deleted IS FALSE

person.count.deleted=SELECT COUNT(*) FROM person WHERE enabled=false AND deleted IS TRUE


#PRIORITY
priority.find.by.name=SELECT * FROM priority WHERE name = ?


#REQUEST GROUP
request.group.find.by.author=SELECT request_group_id, name, author_id FROM request_group WHERE author_id = ?
request.group.find.by.name.part=SELECT request_group_id, name, author_id FROM request_group WHERE name ~* ? AND author_id = ?
request.group.count.by.author=SELECT COUNT(*) FROM request_group WHERE author_id = ?
request.group.find.by.name.author=SELECT request_group_id, name, author_id FROM request_group \
   WHERE name = ? AND author_id = ?

#REQUEST
request.find.all.available.by.priority=SELECT * FROM request WHERE priority_id = ? AND manager_id IS NULL \
    AND parent_id IS NULL AND status_id!=4
request.find.all.available=SELECT * FROM request WHERE manager_id IS NULL AND status_id!=4 AND parent_id IS NULL 
request.find.all.by.employee=SELECT * FROM request WHERE employee_id = ? \
    AND status_id!=4 AND status_id!=3 AND parent_id IS NULL
request.find.all.closed.by.employee=SELECT * FROM request WHERE employee_id = ? AND status_id=3 AND parent_id IS NULL
request.count.closed.by.employee=SELECT count(request_id) FROM request WHERE employee_id = ? AND status_id=3 AND parent_id IS NULL
request.find.all.by.manager=SELECT * FROM request WHERE manager_id = ? \
    AND status_id=2 AND parent_id IS NULL 
request.find.all=SELECT * FROM request WHERE parent_id IS NULL
request.find.all.by.user=SELECT * FROM request WHERE employee_id = ? AND parent_id IS NULL 
request.find.all.assigned=SELECT * FROM request WHERE status_id!=4 AND manager_id = ? AND parent_id IS NULL
request.find.all.assigned.by.manager=SELECT * FROM request WHERE manager_id = ? AND parent_id IS NULL 
request.find.all.sub.request=SELECT  request_id, name, description, creation_time, \
    estimate, status_id, employee_id, manager_id, priority_id, request_group_id, parent_id FROM \
    request WHERE parent_id = ? ORDER BY estimate ASC
request.assign=UPDATE request SET manager_id = ?, status_id = ? \
    WHERE request_id = ?
request.unassign=UPDATE request SET manager_id = NULL \
    WHERE request_id = ?
request.count.all.by.user=SELECT count(request_id) FROM request \
    WHERE employee_id = ? AND parent_id IS NULL
request.count.all.assigned.by.manager=SELECT count(request_id) FROM request \
    WHERE manager_id = ? AND parent_id IS NULL
request.count.all.assigned=SELECT count(request_id) FROM request \
    WHERE manager_id = ? AND status_id!=4 AND parent_id IS NULL
request.count.free=SELECT count(request_id) FROM request WHERE  manager_id IS NULL AND status_id!=4 AND parent_id IS NULL
request.count.by.priority=SELECT count(request_id) FROM request \
    WHERE priority_id = ? AND manager_id IS NULL AND status_id!=4 AND parent_id IS NULL
request.count.by.employee=SELECT count(request_id) FROM request \
    WHERE employee_id = ? AND status_id!=4 AND status_id!=3 AND parent_id IS NULL
request.count.by.manager=SELECT count(request_id) FROM request \
    WHERE manager_id = ? AND (status_id=2 OR status_id =1)
request.count.by.request.group=SELECT COUNT(*) FROM request WHERE request_group_id = ? AND parent_id IS NULL
request.find.by.request.group=SELECT * FROM request WHERE request_group_id = ? AND parent_id IS NULL
request.delete=UPDATE request SET status_id = 4 WHERE request_id = ?
request.update.status=UPDATE request SET status_id = ? WHERE request_id = ?
request.update.priority=UPDATE request SET priority_id = ? WHERE request_id = ?
request.update.group=UPDATE request SET request_group_id = ? WHERE request_id = ?

#PEPORT
request.all.per.month = SELECT * FROM request \
    WHERE creation_time >= date_trunc('month', current_date) AND creation_time <= (current_date + INTERVAL '1 day') \
    AND request.employee_id = ?
request.all.per.quarter = SELECT * FROM request \
    WHERE creation_time >= ((date_trunc('day', current_date)) - interval '3 month') AND creation_time <= (current_date + INTERVAL '1 day') \
    AND request.employee_id = ?
request.all.per.year = SELECT * FROM request \
    WHERE creation_time >= date_trunc('year', current_date) AND creation_time <= (current_date + INTERVAL '1 day') \
    AND request.employee_id = ?

request.all.per.month.by.manager = SELECT * FROM request \
    WHERE creation_time >= date_trunc('month', current_date) AND creation_time <= (current_date + INTERVAL '1 day') \
    AND request.manager_id = ?
request.all.by.manager.and.period = SELECT * FROM request \
    WHERE ((creation_time >= ? AND creation_time <= ?) \
    OR (estimate >= ? AND estimate <= ?)) \
    AND request.manager_id = ?
request.all.per.quarter.by.manager = SELECT * FROM request \
    WHERE creation_time >= ((date_trunc('day', current_date)) - interval '3 month') AND creation_time <= (current_date + INTERVAL '1 day') \
    AND request.manager_id = ?
request.all.per.year.by.manager = SELECT * FROM request \
    WHERE creation_time >= date_trunc('year', current_date) AND creation_time <= (current_date + INTERVAL '1 day') \
    AND request.manager_id = ?




#TOKEN
token.find=SELECT token_id, token, person_id, token_type, date_expired FROM TOKEN \
    WHERE token = ?
token.registration.find.by.person=SELECT token_id, token, person_id, token_type, date_expired FROM TOKEN \
    WHERE person_id = ? AND token_type = 1
token.reset.pass.find.by.person=SELECT token_id, token, person_id, token_type, date_expired FROM TOKEN \
    WHERE person_id = ? AND token_type = 2

#SUBSCRIBING
subscribe=INSERT INTO subscriber_request(request_id, subscriber_id) VALUES (?, ?)
unsubscribe=DELETE FROM subscriber_request WHERE request_id=? AND subscriber_id=?
find.subscribers.by.request=SELECT * FROM person WHERE person_id IN \
  (SELECT subscriber_id FROM subscriber_request WHERE request_id=?)
find.requests.by.subscriber=SELECT * FROM request WHERE request_id IN \
  (SELECT request_id FROM subscriber_request WHERE subscriber_id=?)
#FRONTEND_NOTIFICATION
get.all.notification.to.person=SELECT * FROM frontend_notification WHERE person_id = ? ORDER BY frontend_notification_id DESC
delete.notification.by.id=DELETE FROM frontend_notification WHERE frontend_notification_id = ?
delete.all.notification.to.person = DELETE FROM frontend_notification WHERE person_id = ?